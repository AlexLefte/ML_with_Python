{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Neural_network_recognizing_clothes","provenance":[],"collapsed_sections":["mU6Vdg3lUt4p","BVwsjc6zVPko","AwMxC3b0a0nC","HWis1BPmbUgG","053gkMMndm5J","xWO5X17bepYf","ai2y8ejKfOTy","wGK6wYRHiuGy"],"toc_visible":true,"authorship_tag":"ABX9TyPr/HutquomoJRPCsoDcN/I"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports & Setup"],"metadata":{"id":"mU6Vdg3lUt4p"}},{"cell_type":"code","source":["%tensorflow_version 2.x  \n","\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"f9MfwnmvU5cr","executionInfo":{"status":"ok","timestamp":1649585136287,"user_tz":-180,"elapsed":2424,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["# Dataset"],"metadata":{"id":"BVwsjc6zVPko"}},{"cell_type":"code","source":["fashion = keras.datasets.fashion_mnist  # loading our dataset\n","(train_images, train_labels), (test_images, test_labels) = fashion.load_data()  # splitting into training/testing sets\n","\n","train_images.shape  # here we can notice the size of our dataset => 6000 images (28x28 pixels)\n","# type(train_images)  # checking the type for train_images\n","# train_images[0,23,23]  # a value between 0-255 (RGB range)\n","\n","# train_labels[:20]  # Checking some labels => we can see labels from 0 to 9\n","#print(test_images.shape)\n","class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal',\n","               'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"],"metadata":{"id":"sU1JWzmaVW_q","executionInfo":{"status":"ok","timestamp":1649585137149,"user_tz":-180,"elapsed":882,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6e2359d2-98a0-4ffd-8fb4-090528a2d667"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","32768/29515 [=================================] - 0s 0us/step\n","40960/29515 [=========================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26427392/26421880 [==============================] - 0s 0us/step\n","26435584/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","16384/5148 [===============================================================================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4423680/4422102 [==============================] - 0s 0us/step\n","4431872/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["# # Plotting some images\n","# plt.figure()\n","# plt.imshow(train_images[78])\n","# plt.colorbar()  # Just to see the color bar next to the image\n","# plt.grid(False)  # We dont want any grid\n","# plt.show()"],"metadata":{"id":"GejjRa0zZYIS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Data Preprocessing"],"metadata":{"id":"AwMxC3b0a0nC"}},{"cell_type":"code","source":["# To bring our values into a range of [0, 1], we need to divide each value to 255 (which is the maximum value)\n","train_images = train_images / 255\n","test_images = test_images / 255"],"metadata":{"id":"a7Y2BEQSa51J","executionInfo":{"status":"ok","timestamp":1649585143264,"user_tz":-180,"elapsed":8,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# Building our model"],"metadata":{"id":"HWis1BPmbUgG"}},{"cell_type":"code","source":["model = keras.Sequential([\n","     keras.layers.Flatten(input_shape=(28, 28)),   # the input layer\n","     keras.layers.Dense(128, activation='relu'),   # the only hidden layer\n","     keras.layers.Dense(10, activation='softmax')  # the output layer\n","])"],"metadata":{"id":"I1IGjAQVbXEW","executionInfo":{"status":"ok","timestamp":1649585147108,"user_tz":-180,"elapsed":499,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["# Compiling the Model"],"metadata":{"id":"053gkMMndm5J"}},{"cell_type":"code","source":["# Here I define the loss function\n","model.compile(optimizer='adam',  # this is the algorithm that performs the gradient descent\n","              loss='sparse_categorical_crossentropy',  \n","              metrics=['accuracy'])  # we just want to see the accuracy in the end"],"metadata":{"id":"ahrVmEiIdww8","executionInfo":{"status":"ok","timestamp":1649585149783,"user_tz":-180,"elapsed":408,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# Training the model"],"metadata":{"id":"xWO5X17bepYf"}},{"cell_type":"code","source":["model.fit(train_images, train_labels, epochs=8)  # epochs = another hyper parameter"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27TvJIcUer0g","executionInfo":{"status":"ok","timestamp":1649585194569,"user_tz":-180,"elapsed":41965,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"2a1b42e2-218b-42a9-e6bb-0b9cfda3d29b"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.4958 - accuracy: 0.8259\n","Epoch 2/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.3726 - accuracy: 0.8664\n","Epoch 3/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.3332 - accuracy: 0.8778\n","Epoch 4/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.3103 - accuracy: 0.8856\n","Epoch 5/8\n","1875/1875 [==============================] - 3s 1ms/step - loss: 0.2925 - accuracy: 0.8926\n","Epoch 6/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.2773 - accuracy: 0.8974\n","Epoch 7/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.2646 - accuracy: 0.9007\n","Epoch 8/8\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.2554 - accuracy: 0.9068\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f3956060c10>"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["# Testing the model"],"metadata":{"id":"ai2y8ejKfOTy"}},{"cell_type":"code","source":["test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=1)\n","print('Test accuracy: ', test_acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hjlLyYSAfQ4D","executionInfo":{"status":"ok","timestamp":1648646375875,"user_tz":-180,"elapsed":1178,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"d92e75dc-60a9-4d1c-c4be-ce43dd35f341"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step - loss: 0.3432 - accuracy: 0.8785\n","Test accuracy:  0.8784999847412109\n"]}]},{"cell_type":"code","source":["predictions = model.predict(test_images)\n","print(\"Our model's prediction: \", class_names[np.argmax(predictions[344])])  # np.argmax() ~ returns the index of the maximum value in the list\n","print('The actual type of clothes: ', class_names[test_labels[344]])\n","print('The predicted image: ')\n","plt.figure()\n","plt.imshow(test_images[344])\n","plt.colorbar()  # Just to see the color bar next to the image\n","plt.grid(False)  # We dont want any grid\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"Q526xpRIg5hS","executionInfo":{"status":"ok","timestamp":1648646388738,"user_tz":-180,"elapsed":1203,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"9565c4a0-29e1-4020-cba9-42c720fb431c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Our model's prediction:  Shirt\n","The actual type of clothes:  Shirt\n","The predicted image: \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Programe to test our model"],"metadata":{"id":"wGK6wYRHiuGy"}},{"cell_type":"code","source":["def make_prediction(model, image, label, class_names):\n","  prediction = model.predict(np.array([image]))\n","  print(\"Our model's prediction: \", class_names[np.argmax(prediction)]) \n","  print('The actual type of clothes: ', class_names[label])\n","  print('The predicted image: ')\n","  plt.figure()\n","  plt.imshow(image)\n","  plt.colorbar()  # Just to see the color bar next to the image\n","  plt.grid(False)  # We dont want any grid\n","  plt.show()\n","\n","def get_value():\n","  while 1:\n","    value = input('Pick a number between 0 and 10000: ')\n","    if value.isdigit():\n","      value = int(value)\n","      if 0 < value and value < 10000:\n","        return value\n","    else:\n","      print(\"Invalid input. Try again!\")   \n","\n","value = get_value()\n","image = test_images[value]\n","label = test_labels[value]\n","make_prediction(model, image, label, class_names)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":338},"id":"gF_LcVfyi4jl","executionInfo":{"status":"ok","timestamp":1649585222447,"user_tz":-180,"elapsed":18267,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"868c8e13-8d4a-4d92-f813-de1188ba8827"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Pick a number between 0 and 10000: 3570\n","Our model's prediction:  Sneaker\n","The actual type of clothes:  Sneaker\n","The predicted image: \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}