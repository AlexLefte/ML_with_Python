{"cells":[{"cell_type":"markdown","source":["# Introduction\n"],"metadata":{"id":"3JKJ21NdO3y2"}},{"cell_type":"markdown","source":["This challenge involves developing an automatic segmentation algorithm to segment liver lesions in contrastÂ­-enhanced abdominal CT scans. For this specific task I have considered performing a multiclass segmentation using **U-Net**. \n","\n","The main reason for picking this architecture is that this kind of convolutional network is quite fast in segmentation of images. It was actually developed for **biomedical image segmentation**."],"metadata":{"id":"vGgoBjOqjEqj"}},{"cell_type":"markdown","source":["# Data import & preprocessing\n"],"metadata":{"id":"jWTJMrMzO66d"}},{"cell_type":"code","source":["!pip install segmentation-models-3D"],"metadata":{"id":"XHHpYXiyzEQA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%tensorflow_version 2.x  \n","\n","import os\n","import csv\n","import random\n","import tensorflow as tf\n","from tensorflow import keras\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import nibabel as nib\n","import glob\n","from keras import layers, models\n","from tensorflow.keras.utils import to_categorical\n","import matplotlib.pyplot as plt\n","\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()"],"metadata":{"id":"3zYvvg2psg8U"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Mounting Google Drive**"],"metadata":{"id":"RQtdw20KU_LM"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n","train_path = '/content/gdrive/MyDrive/LITS Challenge/Training Batch 2/'  # Saving our training set's path, so we don't need to work with such long strings\n","test_path = '/content/gdrive/MyDrive/LITS Challenge/Training Batch 1/'   # The same with our testing set's path "],"metadata":{"id":"LoogjfHUQGV5","executionInfo":{"status":"ok","timestamp":1650318259354,"user_tz":-180,"elapsed":1657,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"b0065219-4648-4781-9ea8-07ddf39e10f2","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["**Getting familiar with our dataset**"],"metadata":{"id":"pKsP3c66VET1"}},{"cell_type":"code","source":["# Just to check what is our data like\n","# Let's take for example 'volume-125', and its segmantation: 'segmentation-125'\n","\n","img = nib.load(train_path + 'volume-40.nii').get_fdata() \n","print(img.shape) \n","# print(img.max())  # Checking what is the maximum value, so we can scale out data\n","img = scaler.fit_transform(img.reshape(-1, img.shape[-1])).reshape(img.shape)\n","# print(img.max())  # Now we can see the maximum value in our tensor is 1.0 (float type)\n","\n","img_segm = nib.load(train_path + 'segmentation-40.nii').get_fdata() \n","img_segm = img_segm.astype(np.uint8)  # Converting values from float type to int type (here we should only have integer values)\n","# print(np.unique(img_segm))  # Here we can see there are the 3 specified classes: 0 -> liver, 1 -> tumor, 2 -> everything else\n","# Which is also what we expected from the beginning\n","print(img_segm.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xsoSIt8ntlrD","executionInfo":{"status":"ok","timestamp":1650222577177,"user_tz":-180,"elapsed":3842,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"9ef5b909-1486-403b-de5e-431871b5e5de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(512, 512, 122)\n","(512, 512, 122)\n"]}]},{"cell_type":"markdown","source":["**Let's display these 2 images, so we can notice the way data was segmented before**"],"metadata":{"id":"hG3RK7oPcmTr"}},{"cell_type":"code","source":["# Always generate a random image number\n","n = random.randint(0, img.shape[2])\n","\n","# Let's plot some images\n","plt.figure(1)\n","plt.subplot(121)\n","plt.imshow(img[:,:,n], cmap='gray')\n","plt.title('Original image')\n","plt.subplot(122)\n","plt.imshow(img_segm[:,:,n])\n","plt.title('Segmentated image')\n","plt.show()\n","\n","# Although I could barely see some relevant data (most of the images were only made of \"Everything else\" pixels),\n","# I could find some images to help me understand the way this training set is segmentated "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"GZ4e8AS0cl_e","executionInfo":{"status":"ok","timestamp":1650221443994,"user_tz":-180,"elapsed":840,"user":{"displayName":"Alex Lefterache","userId":"15058845770182448453"}},"outputId":"f7f05f5c-e65c-462d-c41b-08f0d9a96b03"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**Proccessing the entire set**"],"metadata":{"id":"HosVdKbBguin"}},{"cell_type":"code","source":["# Now we want to proccess the entire data set (both the training and the testing one),\n","# so what we want to is:\n","# 1. Going through each '.nii' file\n","# 2. Scaling it\n","# 3. Making sure the segmentated image does contain enough useful data (there are not only \"Everything else\" pixels) - Just for the training set\n","# 4. Saving the relevant data\n","\n","img_list = sorted(glob.glob(train_path + \"volume*\"))  # We sorted it so that originals will match the segmentated images\n","img_segm_list = sorted(glob.glob(train_path + \"segmentation*\"))\n","# print(len(img_list), len(img_segm_list))  # Just to lengths of these lists match\n","# print(img_list)\n","# print(img_segm_list)\n","\n","testing_list = sorted(glob.glob(test_path + \"volume*\"))\n","testing_segm_list = sorted(glob.glob(test_path + \"segmentation*\"))\n","# print(len(testing_list), len(testing_segm_list))\n","\n","#  Selecting our training data\n","for i in range(len(img_list)):\n","  tmp = nib.load(img_list[i]).get_fdata()\n","  tmp = scaler.fit_transform(tmp.reshape(-1, tmp.shape[-1])).reshape(tmp.shape)\n","  \n","  tmp_segm = nib.load(img_segm_list[i]).get_fdata() \n","  tmp_segm = tmp_segm.astype(np.uint8)  # Converting values from float type to int type (here we should only have integer values)\n","\n","  # Reshaping our data in 256 x 256 x 256 pixels. The main reason for doing so is\n","  # related to both proccessing time and phisical resources\n","  tmp=tmp[128:384, 128:384, 1:129]\n","  tmp_segm = tmp_segm[128:384, 128:384, 1:129]\n","\n","  # Counting the number of unique elements for each class, so we can determine\n","  # whether the specific image contains enough relevant data\n","  val, counts = np.unique(tmp_segm, return_counts=True)\n","\n","  if (counts[0] / counts.sum()) < 0.95:  # If 0's count for more than 95% of the mask => we won't save this file\n","  # Otherwise we will save it\n","      tmp_segm = to_categorical(tmp_segm, num_classes=3)\n","      np.save('/content/LITS_train/img/volume_'+str(i)+'.npy', tmp)\n","      np.save('/content/LITS_train/img_segm/segmentation_'+str(i)+'.npy', tmp_segm)\n"],"metadata":{"id":"-EAC9fWug5yy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Selecting our testing data\n","# For the reasons mentioned above, I decided to pick just a few CT-s for testing\n","# Otherwise instead of this list we would have used our \"testing_list\"\n","index_list = [1, 4, 15, 20, 25]\n","for i in index_list:\n","  tmp = nib.load(testing_list[i]).get_fdata()\n","  tmp = scaler.fit_transform(tmp.reshape(-1, tmp.shape[-1])).reshape(tmp.shape)\n","  \n","  tmp_segm = nib.load(testing_segm_list[i]).get_fdata() \n","  tmp_segm = tmp_segm.astype(np.uint8)  # Converting values from float type to int type (here we should only have integer values)\n","\n","  tmp=tmp[128:384, 128:384, 1:129]\n","  tmp_segm = tmp_segm[128:384, 128:384, 1:129]\n","\n","  tmp_segm = to_categorical(tmp_segm, num_classes=3)\n","  \n","  np.save('/content/LITS_test/img_test/volume_'+str(i)+'.npy', tmp)\n","  np.save('/content/LITS_test/img_segm_test/segmentation_'+str(i)+'.npy', tmp_segm)"],"metadata":{"id":"T88ReC19ZaZv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Creating our data generator\n"],"metadata":{"id":"5yiRp1VUfMCV"}},{"cell_type":"code","source":["def images_list(img_direct, img_list):\n","  images = []\n","  for image_name in img_list:\n","    image = np.load(img_direct+image_name)\n","    images.append(image)\n","  images = np.dstack(images)\n","  return images\n","\n","\n","def imageLoader(img_direct, img_list, segm_direct, segm_list, batch_size):\n","    l = len(img_list)\n","    while True:\n","        batch_start = 0\n","        batch_end = batch_size\n","        \n","        while batch_start < l:\n","            limit = min(batch_end, l)  # We want our limit not to get past our actual length \n","          \n","            X = images_list(img_direct, img_list[batch_start:limit])\n","            Y = images_list(segm_direct, segm_list[batch_start:limit])\n","            yield (X,Y)      \n","\n","            batch_start += batch_size   \n","            batch_end += batch_size\n"],"metadata":{"id":"0Pv9DBp5fP6q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Testing the data generator"],"metadata":{"id":"qN3xUhBEkPQt"}},{"cell_type":"code","source":["#Test the generator\n","\n","train_img_dir = \"/content/LITS_train/img/\"\n","train_segm_dir = \"/content/LITS_train/img_segm/\"\n","train_img_list = sorted(os.listdir(train_img_dir))[1:]\n","train_segm_list = sorted(os.listdir(train_segm_dir))[1:]\n","\n","batch_size = 2\n","\n","test_img_dir = \"/content/LITS_test/img/\"\n","test_segm_dir = \"/content/LITS_test/img_segm/\"\n","\n","test_img_list = sorted(os.listdir(train_img_dir))[1:]\n","test_segm_list = sorted(os.listdir(train_segm_dir))[1:]\n","\n","train_img_datagen = imageLoader(train_img_dir, train_img_list, train_segm_dir, train_segm_list, batch_size)\n","val_img_datagen = imageLoader(test_img_dir, test_img_list, test_segm_dir, test_segm_list, batch_size)\n"],"metadata":{"id":"bLpJdlkKkSQ1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Creating our 3D unet model"],"metadata":{"id":"4lN_gdNmlg2I"}},{"cell_type":"code","source":["from keras.models import Model\n","from keras.layers import Input, Conv3D, MaxPooling3D, concatenate, Conv3DTranspose, BatchNormalization, Dropout, Lambda\n","from tensorflow.keras.optimizers import Adam\n","from keras.metrics import MeanIoU\n","\n","kernel_initializer =  'he_uniform'\n","\n","def simple_unet_model(IMG_HEIGHT, IMG_WIDTH, IMG_DEPTH, IMG_CHANNELS, num_classes):\n","    # Build the model\n","    inputs = Input((IMG_HEIGHT, IMG_WIDTH, IMG_DEPTH, IMG_CHANNELS))\n","    s = inputs\n","\n","    #Contraction path\n","    c1 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(s)\n","    c1 = Dropout(0.1)(c1)\n","    c1 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c1)\n","    p1 = MaxPooling3D((2, 2, 2))(c1)\n","    \n","    c2 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p1)\n","    c2 = Dropout(0.1)(c2)\n","    c2 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c2)\n","    p2 = MaxPooling3D((2, 2, 2))(c2)\n","     \n","    c3 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p2)\n","    c3 = Dropout(0.2)(c3)\n","    c3 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c3)\n","    p3 = MaxPooling3D((2, 2, 2))(c3)\n","     \n","    c4 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p3)\n","    c4 = Dropout(0.2)(c4)\n","    c4 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c4)\n","    p4 = MaxPooling3D(pool_size=(2, 2, 2))(c4)\n","     \n","    c5 = Conv3D(256, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p4)\n","    c5 = Dropout(0.3)(c5)\n","    c5 = Conv3D(256, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c5)\n","    \n","    #Expansive path \n","    u6 = Conv3DTranspose(128, (2, 2, 2), strides=(2, 2, 2), padding='same')(c5)\n","    u6 = concatenate([u6, c4])\n","    c6 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u6)\n","    c6 = Dropout(0.2)(c6)\n","    c6 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c6)\n","     \n","    u7 = Conv3DTranspose(64, (2, 2, 2), strides=(2, 2, 2), padding='same')(c6)\n","    u7 = concatenate([u7, c3])\n","    c7 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u7)\n","    c7 = Dropout(0.2)(c7)\n","    c7 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c7)\n","     \n","    u8 = Conv3DTranspose(32, (2, 2, 2), strides=(2, 2, 2), padding='same')(c7)\n","    u8 = concatenate([u8, c2])\n","    c8 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u8)\n","    c8 = Dropout(0.1)(c8)\n","    c8 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c8)\n","     \n","    u9 = Conv3DTranspose(16, (2, 2, 2), strides=(2, 2, 2), padding='same')(c8)\n","    u9 = concatenate([u9, c1])\n","    c9 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u9)\n","    c9 = Dropout(0.1)(c9)\n","    c9 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c9)\n","     \n","    outputs = Conv3D(num_classes, (1, 1, 1), activation='softmax')(c9)\n","     \n","    model = Model(inputs=[inputs], outputs=[outputs])\n","    model.summary()\n","    \n","    return model\n"],"metadata":{"id":"ocHZyjxcGAz7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Loss, metrics and optimizer for training"],"metadata":{"id":"G6mych62eZTZ"}},{"cell_type":"code","source":["wt0, wt1, wt2, wt3 = 0.25,0.25,0.25,0.25  # Defining weights\n","import segmentation_models_3D as sm\n","dice_loss = sm.losses.DiceLoss(class_weights=np.array([wt0, wt1, wt2, wt3])) \n","focal_loss = sm.losses.CategoricalFocalLoss()\n","total_loss = dice_loss + (1 * focal_loss)\n","\n","metrics = ['accuracy', sm.metrics.IOUScore(threshold=0.5)]\n","\n","LR = 0.0001\n","optim = keras.optimizers.Adam(LR)"],"metadata":{"id":"7LlTuVnpeewA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Fitting the model"],"metadata":{"id":"4bNNVmKce4Ue"}},{"cell_type":"code","source":["batch_size = 2\n","\n","steps_per_epoch = len(train_img_list)//batch_size\n","test_steps_per_epoch = len(test_img_list)//batch_size\n","\n","model = simple_unet_model(IMG_HEIGHT=256, \n","                          IMG_WIDTH=256,\n","                          IMG_DEPTH=256, \n","                          IMG_CHANNELS=1,\n","                          num_classes=3)\n","\n","model.compile(optimizer = optim, loss=total_loss, metrics=metrics)\n","print(model.summary())\n","\n","print(model.input_shape)\n","print(model.output_shape)\n","\n","model_1=model.fit(train_img_datagen,\n","          steps_per_epoch=steps_per_epoch,\n","          epochs=100,\n","          verbose=1,\n","          validation_data=val_img_datagen,\n","          validation_steps=test_steps_per_epoch\n","          )\n","\n","model.save('/content/Model/lits.hdf5')"],"metadata":{"id":"tJ9bTW7Ye9cf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Plotting the training and validation IoU and loss for each epoch"],"metadata":{"id":"7ObHgZIXiNxE"}},{"cell_type":"code","source":["loss = model_1.model_1['loss']\n","val_loss = model_1.model_1['val_loss']\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, 'y', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","acc = model_1.model_1['accuracy']\n","val_acc = model_1.model_1['val_accuracy']\n","\n","plt.plot(epochs, acc, 'y', label='Training accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation accuracy')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"-HICCY8SiUpy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Loading the model and predict\n"],"metadata":{"id":"cq13oR_kiYg9"}},{"cell_type":"code","source":["from keras.models import load_model\n","from keras.metrics import MeanIoU\n","\n","\n","my_model = load_model('/content/lits.hdf5', compile=False)\n","\n","test_img_dir = \"/content/LITS_test/img/\"\n","test_segm_dir = \"/content/LITS_test/img_segm/\"\n","\n","test_img_list = os.listdir(train_img_dir)\n","test_segm_list = os.listdir(train_segm_dir)\n","\n","batch_size = 2\n","test_img_datagen = imageLoader(test_img_dir, test_img_list, \n","                                test_segm_dir, test_segm_list, batch_size)\n","\n","test_image_batch, test_mask_batch = test_img_datagen.__next__()\n","\n","test_mask_batch_argmax = np.argmax(test_mask_batch, axis=3)\n","test_pred_batch = my_model.predict(test_image_batch)\n","test_pred_batch_argmax = np.argmax(test_pred_batch, axis=3)\n","\n","n_classes = 3\n","IOU_keras = MeanIoU(num_classes=n_classes)  \n","IOU_keras.update_state(test_pred_batch_argmax, test_mask_batch_argmax)\n","print(\"Mean IoU =\", IOU_keras.result().numpy())"],"metadata":{"id":"rEEh2sSKjcR8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Plotting a prediction"],"metadata":{"id":"VVNkjtPMlm4p"}},{"cell_type":"code","source":["#Try images: \n","img_num = 15\n","\n","test_img = np.load(\"/content/LITS_test/img/\"+str(img_num)+\".npy\")\n","\n","test_mask = np.load(\"/content/LITS_test/img_segm/\"+str(img_num)+\".npy\")\n","test_mask_argmax=np.argmax(test_mask, axis=2)\n","\n","test_img_input = np.expand_dims(test_img, axis=0)\n","test_prediction = my_model.predict(test_img_input)\n","test_prediction_argmax=np.argmax(test_prediction, axis=2)[0,:,:]\n","\n","#Plot individual slices from test predictions for verification\n","from matplotlib import pyplot as plt\n","import random\n","\n","n_slice = 20\n","plt.figure(figsize=(12, 8))\n","plt.subplot(231)\n","plt.title('Testing Image')\n","plt.imshow(test_img[:,:,n_slice,1], cmap='gray')\n","plt.subplot(232)\n","plt.title('Testing Label')\n","plt.imshow(test_mask_argmax[:,:,n_slice])\n","plt.subplot(233)\n","plt.title('Prediction on test image')\n","plt.imshow(test_prediction_argmax[:,:, n_slice])\n","plt.show()"],"metadata":{"id":"UlWWC1njl2V7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Conclusions:"],"metadata":{"id":"OAYHrMCNl-zv"}},{"cell_type":"markdown","source":["\n","\n","1.   Although I was not able to figure the project out until the very end, I found it very interesting and useful for my development. I must admit I had never tried this type of network architecture before.\n","2.   In order to improve the results of this type of algorithm I could have considered using all the CT-s provided for training (although U-Net is known to handle well even smaller data sets). The reasons I could not act so, was mostly because of the preproccessing and traing time, but also because of the physical memory.\n","\n"],"metadata":{"id":"RnKuvZdjmE0h"}}],"metadata":{"colab":{"collapsed_sections":[],"name":"LITS_CT","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1649927779281}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}